#pragma strict

class {{= it.name}} {
  function {{= it.name}}(builder :{{= it.name}}Builder) {
    {{~ it.fields :field}}
    this._{{= field.name}} = builder.{{= field.name}};{{~}}

  }
  {{~ it.fields :field}}
  private var _{{= field.name}} :{{= field.type}};{{~}}

  public function ToBuilder() {
    return {{= it.name}}.NewBuilderFrom(this);
  }

  public static function NewBuilder() {
    return new {{= it.name}}Builder(null);
  }

  public static function NewBuilderFrom(entity :{{= it.name}}) {
    return new {{= it.name}}Builder(entity);
  }
  {{~ it.fields :field}}
  public function Get{{= field.name}}() {
    return this._{{= field.name}};
  }
  {{~}}
}

class {{= it.name}}Builder {
  function {{= it.name}}Builder(entity :{{= it.name}}) {
    {{~ it.fields :field}}{{? field.repeated}}this._{{= field.name}}List = [];{{?}}
    {{~}}
    if (entity != null) {

      {{~ it.fields :field}}{{? field.repeated}}this._{{= field.name}}List = entity.Get{{= field.name}}List();{{??}}this._{{= field.name}} = entity.Get{{= field.name}}();{{?}}
      {{~}}
    }
  }
  {{~ it.fields :field}}
  private var _{{= field.name}} :{{= field.type}};{{~}}

  public function Build() {
    return new {{= it.name}}(this);
  }
  {{~ it.fields :field}}{{? field.repeated}}
  public function Add{{= field.name}}(value :{{= field.type}}) {
    this._{{= field.name}}List.push(value);
  }
  {{??}}
  public function Get{{= field.name}}() {
    return this._{{= field.name}};
  }

  public function Set{{= field.name}}(value :{{= field.type}}) {
    this._{{= field.name}} = value;
    return this;
  }
  {{?}}{{~}}
}